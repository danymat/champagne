local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
    vim.fn.system({
        "git",
        "clone",
        "--filter=blob:none",
        "--single-branch",
        "https://github.com/folke/lazy.nvim.git",
        lazypath,
    })
end
vim.opt.runtimepath:prepend(lazypath)

vim.g.mapleader = " "
vim.o.relativenumber = true
vim.o.number = true
vim.o.undofile = true
vim.o.expandtab = true
vim.o.shiftwidth = 4
vim.o.completeopt = "menu,menuone,noselect"
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1
vim.o.termguicolors = true
vim.o.conceallevel = 2
vim.o.cmdheight = 0
vim.o.foldenable = true
vim.o.mouse = ""

local map = vim.keymap.set
map("n", "<Leader>so", ":so %<CR>")
map("n", "<Leader>h", ":wincmd h<CR>")
map("n", "<Leader>j", ":wincmd j<CR>")
map("n", "<Leader>k", ":wincmd k<CR>")
map("n", "<Leader>l", ":wincmd l<CR>")
map("n", "<Leader>fs", vim.lsp.buf.format)
map("n", "K", vim.lsp.buf.hover)
map("n", "<leader>r", vim.lsp.buf.rename)
map("n", "<C-n>", vim.diagnostic.goto_next)
map("n", "<C-b>", vim.diagnostic.goto_prev)
map('i', '<C-Space>', '<C-x><C-o>') -- Force Trigger completion
map('i', '<C-j>',   [[pumvisible() ? "\<C-n>" : "\<C-j>"]],   { expr = true })
map('i', '<C-k>', [[pumvisible() ? "\<C-p>" : "\<C-k>"]], { expr = true })
map({ "n", "v" }, "â‰ ", "<C-d>zz")
map({ "n", "v" }, "Ã·", "<C-u>zz")
map({ "n", "v" }, "<C-j>", "<C-d>zz")
map({ "n", "v" }, "<C-k>", "<C-u>zz")
map("t", "<Esc>", "<C-\\><C-n>")
map("n", "<Leader>=", "<C-^>")


map("n", "<Leader>gs", function()
    require("lazy.util").float_term({ "lazygit" }, {
        terminal = true,
        close_on_exit = true,
        enter = true,
    })
end)

require("lazy").setup({
    "nvim-lua/plenary.nvim",

    {
        "rose-pine/neovim",
        name = "rose-pine",
        config = {
            dark_variant = "moon",
            disable_background = true -- In case of transparent terminals
        },
        init = function()
            vim.cmd("colorscheme rose-pine")
        end,
    },
    {
        "nvim-treesitter/nvim-treesitter",
        build = ":TSUpdate",
        config = function()
            local configs = require("nvim-treesitter.configs")

            configs.setup({
                highlight = {
                    ensure_installed = { "c", "lua", "python", "vim", "vimdoc", "html" },
                    enable = true,
                    additional_vim_regex_highlighting = { "markdown" },
                    indent = { enable = true },
                },
                playground = {
                    enable = true,
                }
            })
        end,
        dependencies = {
            "nvim-treesitter/nvim-treesitter-context",
            "nvim-treesitter/playground",
        }
    },
    {
        "nvim-telescope/telescope.nvim",
        cmd = "Telescope",
        keys = {
            { "<C-f>",      ":Telescope find_files<CR>" },
            { "<Leader>ff", ":Telescope live_grep<CR>" },
            { "<Leader>fb", ":Telescope buffers<CR>" },
            { "<Leader>fh", ":Telescope help_tags<CR>" },
            { "<leader>gr", ":Telescope lsp_references<CR>" },
            { "<leader>gd", ":Telescope lsp_definitions<CR>" },
            { "<Leader>ds", ":Telescope lsp_document_symbols symbols=func,function,class<CR>" },
            { "<C-a>",      ":lua vim.lsp.buf.code_action()<CR>" },
            { "<Leader>p",  ":Telescope workspaces<CR>" },
        },
        dependencies = "natecraddock/workspaces.nvim",
        config = function()
            local telescope = require("telescope")
            telescope.load_extension("workspaces")
            telescope.setup({
                extensions = {
                    workspaces = {
                        -- keep insert mode after selection in the picker, default is false
                        keep_insert = true,
                    },
                },
            })
        end,
    },
    {
        "windwp/nvim-autopairs",
        config = true,
    },
    "kyazdani42/nvim-web-devicons",
    { "nvim-lualine/lualine.nvim",           config = true },
    { "lukas-reineke/indent-blankline.nvim", config = true, main = "ibl" },
    { "sindrets/diffview.nvim", },
    {
        "numToStr/Comment.nvim",
        config = {
            toggler = {
                line = "<Leader>cc",
                block = "<Leader>bc",
            },
            opleader = {
                line = "<Leader>c",
                block = "<Leader>b",
            },
            extra = {
                eol = "<Leader>ca",
            },
        },
    },
    {
        "nvim-tree/nvim-tree.lua",
        config = { sync_root_with_cwd = true },
        keys = {
            {
                "<Leader>t",
                function()
                    require("nvim-tree.api").tree.toggle()
                end,
            },
        },
    },
    { "ray-x/lsp_signature.nvim", config = { hint_prefix = "ðŸ§¸ " } },
    { "kylechui/nvim-surround", config = true },
    {
        "zk-org/zk-nvim",
        name = "zk",
        config = function()
            require("zk").setup({ picker = "telescope" })
            require("zk.commands").add("ZkStartingPoint", function(options)
                options = vim.tbl_extend("force", { match = "Â§Â§", matchStrategy = "exact" }, options or {})
                require("zk").edit(options, { title = "Â§Â§" })
            end)
        end,
        keys = {
            {
                "<Leader>Â§Â§",
                function()
                    require("zk.commands").get("ZkStartingPoint")()
                end,
            },
            {
                "<Leader>zk",
                function()
                    require("zk.commands").get("ZkNotes")({ select = { 'path', 'absPath' } })
                end,
            },
            {
                "<Leader>zb",
                function()
                    require("zk.commands").get("ZkBacklinks")()
                end,
            },
            {
                "<Leader>zi",
                function()
                    require("zk.commands").get("ZkLinks")()
                end,
            },
            {
                "<Leader>zt",
                function()
                    require("zk.commands").get("ZkTags")({ sort = { "note-count" } })
                end,
            },
            {
                "<Leader>zn",
                function()
                    require("zk.commands").get("ZkNew")({ title = vim.fn.input("Title: ") })
                end,
            },
            -- TODO: random note: :ZkNotes { sort = {"random"}, limit = 1 } (https://github.com/mickael-menu/zk-nvim/discussions/94)
        },
    },
    {
        "danymat/neogen",
        config = {
            snippet_engine = "luasnip",
            languages = {
                python = { template = { annotation_convention = "reST" } },
            },
        },
        keys = {
            { "<Leader>nf", ":Neogen func<CR>" },
            { "<Leader>nc", ":Neogen class<CR>" },
        },
        -- dev = true,
    },
    { "folke/todo-comments.nvim", config = true },
    { "tpope/vim-repeat" },
    {
        "vhyrro/luarocks.nvim",
        priority = 1000,
        config = true
    },
    -- {
    --     "nvim-neorg/neorg",
    --     dependencies = { "luarocks.nvim" },
    --     config = {
    --         load = {
    --             ["core.defaults"] = {},
    --             ["core.ui.calendar"] = {},
    --             ["core.concealer"] = {},
    --             ["core.presenter"] = { config = { zen_mode = "zen-mode" } },
    --             ["core.dirman"] = {
    --                 config = {
    --                     workspaces = {
    --                         notes = "~/notes",
    --                     },
    --                 },
    --             },
    --         },
    --     },
    --     -- dev = true,
    --     dependencies = "folke/zen-mode.nvim",
    -- },
    {
        "shortcuts/no-neck-pain.nvim",
        version = "*",
        config = {
            buffers = {
                scratchPad = {
                    enabled = true,
                    fileName = "scratchpad-buffer.norg",
                    location = "~/notes",
                },
            },
        },
        keys = {
            { "<Leader>zz", ":NoNeckPain<CR>" },
        },
    },
    {
        "neovim/nvim-lspconfig",
        config = function()
            -- local luasnip = require("luasnip")
            -- local lspkind = require("lspkind")
            require("mason").setup({log_level = vim.log.levels.DEBUG})
            require("mason-lspconfig").setup()

            require("mason-lspconfig").setup_handlers {
                -- The first entry (without a key) will be the default handler
                -- and will be called for each installed server that doesn't have
                -- a dedicated handler.
                function (server_name) -- default handler (optional)
                    require("lspconfig")[server_name].setup {}
                end,
           ["lua_ls"] = function ()
               local lspconfig = require("lspconfig")
               lspconfig.lua_ls.setup {
                   settings = {
                       Lua = {
                           diagnostics = {
                               globals = { "vim" }
                           }
                       }
                   }
               }
           end,
            }

            require('mini.completion').setup()
        end,
        dependencies = {
            -- LSP Support
            "williamboman/mason.nvim",
            "williamboman/mason-lspconfig.nvim",

            -- Snippets
            "L3MON4D3/LuaSnip",
            "rafamadriz/friendly-snippets",

            -- lspkind
            "onsails/lspkind.nvim"
        },
    },
    {
        "natecraddock/workspaces.nvim",
        config = {
            hooks = {
                open = { "Telescope find_files" },
            },
        },
    },
    {
        "j-hui/fidget.nvim",
        tag = "legacy",
        config = true
    },
    {
        "AckslD/nvim-neoclip.lua",
        dependencies = {
            { "kkharji/sqlite.lua", as = "sqlite" },
            "nvim-telescope/telescope.nvim",
        },
        config = function()
            require("neoclip").setup()
            require("telescope").load_extension("neoclip")
        end,
        keys = {
            { "<Leader>y", ":Telescope neoclip plus<CR>" },
            {
                "<Leader>dy",
                function()
                    require("neoclip").clear_history()
                end,
            },
        },
    },
    { "stevearc/dressing.nvim" },
    {
        "simrat39/rust-tools.nvim",
        config = true,
        dependencies = {
            "nvim-lua/plenary.nvim",
            "mfussenegger/nvim-dap",
            "neovim/nvim-lspconfig",
        },
    },
    {
        "ggandor/leap.nvim",
        config = function()
            require("leap").add_default_mappings()
        end,
    },
    {
        "ThePrimeagen/harpoon",
        keys = {
            { "<Leader>a",  function() require("harpoon.mark").add_file() end },
            { "<Leader>o",  function() require("harpoon.ui").toggle_quick_menu() end },
            { "<Leader>&",  function() require("harpoon.ui").nav_file(1) end },
            { "<Leader>Ã©",  function() require("harpoon.ui").nav_file(2) end },
            { "<Leader>\"", function() require("harpoon.ui").nav_file(3) end },
            { "<Leader>'",  function() require("harpoon.ui").nav_file(4) end },
        }
    },
    {
        'echasnovski/mini.nvim',
        version = '*',
        config = function()
            require('mini.test').setup()
        end
    },
    {
        "oflisback/obsidian-bridge.nvim",
        dependencies = { "nvim-telescope/telescope.nvim" },
        config = function() require("obsidian-bridge").setup() end,
        event = {
            "BufReadPre *.md",
            "BufNewFile *.md",
        },
        lazy = true,
    }
}, {
    dev = { path = "~/Developer" },
})
